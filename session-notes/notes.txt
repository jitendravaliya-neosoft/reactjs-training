--> React Js :- It is a flexible Javascript library for building user interfaces. It;s "V" in MVC.
  -> MVC :- stand for Model View Controller 
     -> Model :- Data Access Layer of the application 
     -> View :- Presentaion Layer (UI)
     -> Controller :- Control Logic layer of application 
   

   client ---> controller ---> Model --> responce -> controller --> View 
     -> React is only the "V" layer of the application.
    -> It is an open-source, component-based front-end library for developing SPA(single page application). It is maintained by facebook.

    --> Features of React Js 
      --> Use JSX :- stand Javascript Syntex Extension . It is faster then normal Javascript . It makes it easier for us to create templates . In one page we define the html code and Javascript code both. We can find the errors in the browser easily.
        <div> </div>
        -> dynamic data binding 
          {title}
     --> ** Virtual DOM :- It exists which is like a lightweight copy of the actual DOM.When any update in the UI , first it goes to V-DOm , then it compare with previous DOM, Only difference part is re-render in the Real DOm, Thats why the performance is fast and there is no leackage of the memeory.

     --> ** component :- It is a core building block of the application . Application is made ip of pieces called components. It is used for reusability. We can create multiple components and merge them all in a parent component .
     --> Performance : use JSX, which is faster to normal Javascript and HTML. Virtual DOM is a less time taking procedure to update webpage content.

   -> Environmental setup 
     -> 1st we need Node Js environment 
       https://nodejs.org/en/download/
        download and install 
     -> https://reactjs.org/
     -> How we create react app 
       npx create-react-app appname
     -> How we run react app 
       -> go to app folder 
        npm start (http://localhost:3000)
     -> FOlder and file structure 
        ->  README.md :- for project undestanding (description)
        -> package.json :- project information and node modules dependencies
        -> package-lock.json :- complete description of node_modules with their version
        -> .gitignore :- github (ignore some file folder)
        -> node_modules :- install all node_modules whose dependencies are define in package.json file.
        -> public 
          index.html :- Html entry point file . It execute when our application is serve.
          -> store all assets like css, images, js , fonts etc.
        -> src :- It is a main folder where we develop our code for the application 
           -> index.js :- main Javascript entry point file . get the root id from index.html and render App component (default component) in the div.
        --> How react application boot(execute)
        index.html 
        <div id="root"></div>
          ---> src/index.js --> It get the id root from index.html and render the App component in the div.

        ---> Components :- It is an main part of a react Js. It is a pieces of code and it is used for reusability.
           -> In a component we can define our Javascript and Html data with the help of JSX.
           --> Types of components
              -> Function Component 
              -> Class Component 
            --> Class Component :- we can manage states. 
              syntex:
              import React,{Component} from 'react';
               class ComponentName extends Component{
                 //define our js part
                   render(){
                     return(
                       <>
                         // Ui Part
                       </>
                     )
                   }
               }
               export default ComponentName;
            --> How we use the component in another component 
            App.js 
            import ComponentName from './components/ComponentName';

            <ComponentName />
          -> Dynamic Data Binding 
             -> render data we have expression 
               { }
               -> for array or object 
               map()
          --> props (properties) : pass data from parent component to the child component .
            -> props are read only 
               App.js 
                 title="--";
                 courses=[];
                 <Home mytitle={title} mycourses={courses}/>
                -> How we read props in a child component 
                Home.js 
                {this.props.propsname}
            -> state :- It is a Javascript Object that store a components dynamic data . we can change that state data as per our requirement. State is mutable.
               constructor(props){
                  super(props);
                  this.state={count:0};//to declare or define a state 
               }
               --> How we read state 
                 this.state.statename 
               --> How we update state 
                 this.setState({count:this.state.count+1})

               -> Task 
                   We have a post list in a App component and we nedd to pass that list to post component and render the list in post component.

 10 Post
  id
  postname 
  postdescription 
  image 
  author
  date 















